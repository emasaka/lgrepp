#!/usr/bin/env perl
use strict;
use warnings;
use 5.014;
use Getopt::Long qw(:config posix_default no_ignore_case gnu_compat);
use Encode;
use Encode::Guess;
use Encode::Locale;
use POSIX qw(isatty);
use File::Find;

sub parse_color_opts {
    my $conf = shift;
    my $color= $conf->{opts}->{color};

    if ($color &&
        (($color eq 'always') ||
         (($color eq 'auto') && isatty(*STDOUT)) )) {
        $conf->{color} = 1;
    }
}

sub parse_pattern_opts {
    my $conf = shift;
    my $mod = '';
    $mod .= 'i' if ($conf->{opts}->{'ignore-case'});
    my $ptn = ($conf->{opts}->{'fixed-strings'} ?
                   quotemeta($conf->{pattern}) : $conf->{pattern} );
    eval {
        $conf->{pattern_re} = (($mod eq '') ? qr/$ptn/ : qr/(?$mod)$ptn/);
    };
    if ($@) {
        warn ($@ =~ s/;.*//r);
        exit 1;
    }
}

sub parse_file_num_opts {
    my $conf = shift;
    $conf->{with_filename} = 1 if ($conf->{opts}->{'with-filename'});
    $conf->{line_number} = 1 if ($conf->{opts}->{'line-number'});
}

sub parse_opts {
    my $conf = shift;
    parse_color_opts($conf);
    parse_pattern_opts($conf);
    parse_file_num_opts($conf);
}

sub guess_encoding_only1 {
    my $data = shift;
    my $enc = guess_encoding($data, qw(euc-jp cp932 7bit-jis));
    if (ref $enc) {
        $enc->name;
    } else {
        # followings are just workaround
        if ($enc =~ /utf8/) {
            'utf8';
        } elsif ($enc =~ /cp932/) {
            'cp932';
        } elsif ($enc =~ /empty/) {
            'ascii';
        } else {
            die "Can't guess: $enc";
        }
    }
}

my $HILIGHT_COLOR = '01;31';

sub lgrepp_file {
    my $conf = shift;
    my $file = shift;

    return if (-d $file);

    my $file_enc = encode($Encode::Locale::ENCODING_LOCALE_FS, $file);
    open my $fh, '<', $file_enc or do {
        say STDERR "can't open $file";
        return;
    };
    my $data = do { local $/; <$fh>; };
    close $fh;

    my $pattern_re = $conf->{pattern_re};

    if ($data =~ /\x00/) {
        if ($data =~ /$pattern_re/) {
            say "Binary file $file matches";
        }
    } else {
        my $enc = guess_encoding_only1($data);
        my @lines = split /\r?\n/, decode($enc, $data);

        my $linenum = 1;
        for my $line (@lines) {
            if ($line =~ /$pattern_re/) {
                print $file, ':' if ($conf->{with_filename});
                print $linenum, ':' if ($conf->{line_number});

                if ($conf->{color}) {
                    $line =~ s/$pattern_re/\33[${HILIGHT_COLOR}m\33[K$&\33[m\33[K/g;
                }
                say $line;
            }
            $linenum++;
        }
    }
}

sub usage {
    say STDERR 'Usage: lgrepp [options] PATTERN [FILE...]';
    exit 1;
}

binmode STDOUT => ':encoding(console_out)';
Encode::Locale::decode_argv;

my %opts;
GetOptions(\%opts,
           'ignore-case|i',
           'fixed-strings|F',
           'color=s',
           'with-filename|H',
           'line-number|n',
           'recursive|r|R',
       );

if (@ARGV == 0) {
    usage;
}

my $ptn = shift @ARGV;

my $conf = +{
    pattern => $ptn,
    opts => \%opts,
};

if ($opts{'recursive'}) {
    $conf->{with_filename} = 1;
    parse_opts($conf);
    find({ wanted => sub {
               my $fn = decode($Encode::Locale::ENCODING_LOCALE_FS,
                               $File::Find::name );
               lgrepp_file($conf, $fn);
           },
           follow_fast => 1, no_chdir => 1 } ,
         (@ARGV == 0 ? ('.') : @ARGV) );
} elsif (@ARGV == 0) {
    parse_opts($conf);
    lgrepp_file($conf, '/dev/stdin');
} else {
    $conf->{with_filename} = (scalar(@ARGV) > 1);
    parse_opts($conf);
    for my $f (@ARGV) {
        lgrepp_file($conf, $f);
    }
}
